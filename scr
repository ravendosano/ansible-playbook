import imaplib
import email
import requests
from datetime import datetime, timedelta

class EmailMonitor:
    def __init__(self, email_address, email_password, webhook_url):
        self.email_address = email_address
        self.email_password = email_password
        self.webhook_url = webhook_url
        
        # Subjects to look for (both success and failure)
        self.success_subjects = [
            "SFTP Report Upload Success",
            "Report Generation Complete"
        ]
        
        self.failure_subjects = [
            "SFTP Report Upload Failed",
            "Report Generation Failed"
        ]
    
    def send_webhook(self, message):
        """Send a simple notification message to Google Chat via webhook"""
        try:
            payload = {
                "text": message  # Just a simple text message
            }
            response = requests.post(self.webhook_url, json=payload)
            response.raise_for_status()  # Will raise an exception for HTTP error codes (400, 404, etc.)
            print("Webhook notification sent successfully")
        except Exception as e:
            print(f"Error sending webhook: {e}")
    
    def check_emails(self):
        """Check for success or failure emails within the last 20 minutes"""
        try:
            mail = imaplib.IMAP4_SSL("imap.gmail.com")
            mail.login(self.email_address, self.email_password)
            mail.select("inbox")
            
            # Get current time and calculate the 20-minute window
            now = datetime.now()
            twenty_minutes_ago = now - timedelta(minutes=20)
            
            # Format both current time and 20 minutes ago for IMAP search (to match the format 'DD-Mon-YYYY')
            now_str = now.strftime("%d-%b-%Y")
            twenty_minutes_ago_str = twenty_minutes_ago.strftime("%d-%b-%Y")
            
            # Search criteria to find emails between the last 20 minutes
            search_criteria = f'(SINCE "{twenty_minutes_ago_str}" BEFORE "{now_str}")'
            print(f"Search criteria: {search_criteria}")  # Debugging line to ensure correct format
            
            _, message_numbers = mail.search(None, search_criteria)
            
            if not message_numbers[0]:
                return "no_emails", None
            
            found_success = set()
            found_failure = set()
            
            for num in message_numbers[0].split():
                _, msg_data = mail.fetch(num, "(RFC822)")
                email_body = msg_data[0][1]
                message = email.message_from_bytes(email_body)
                subject = message["subject"]
                
                if subject in self.success_subjects:
                    found_success.add(subject)
                elif subject in self.failure_subjects:
                    found_failure.add(subject)
                    # Get email body for error details
                    error_message = self.get_email_body(message)
                    return "failure", error_message
            
            mail.logout()
            
            if found_failure:
                return "failure", None
            elif found_success == set(self.success_subjects):
                return "success", None
            else:
                return "waiting", None
            
        except Exception as e:
            print(f"Error checking emails: {e}")
            return "error", str(e)
    
    def get_email_body(self, message):
        """Extract the email body text"""
        if message.is_multipart():
            for part in message.walk():
                if part.get_content_type() == "text/plain":
                    return part.get_payload(decode=True).decode()
        else:
            return message.get_payload(decode=True).decode()
        return "No error details available"

def main():
    # Your credentials
    EMAIL_ADDRESS = "your_email@gmail.com"
    EMAIL_PASSWORD = "your_app_password"
    WEBHOOK_URL = "https://chat.googleapis.com/v1/spaces/AAAAi7PKnrs/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=Vm39Y1q6nvJQ4aF_sPAwIrV1yHTHfpCoJhOa8odmRAU"
    
    monitor = EmailMonitor(EMAIL_ADDRESS, EMAIL_PASSWORD, WEBHOOK_URL)

    # Check for emails in the last 20 minutes once
    print("Checking for emails in the last 20 minutes...")
    status, error_details = monitor.check_emails()
    
    if status == "success":
        print("Success! All required emails found.")
        # Send success notification
        monitor.send_webhook("✅ Daily Report: Successfully generated and uploaded to SFTP server.")
        
    elif status == "failure":
        print("Failure detected in report processing.")
        # Send failure notification
        monitor.send_webhook(f"❌ Daily Report: Failed\n{error_details if error_details else 'Check email for details.'}")
        
    elif status == "no_emails":
        print("No emails found in the last 20 minutes.")
        # Send notification that no email was found
        monitor.send_webhook("⚠️ No required report emails received in the last 20 minutes.")
        
    else:  # error
        print(f"Error checking emails: {error_details}")
        monitor.send_webhook(f"⚠️ Error monitoring emails: {error_details}")

if __name__ == "__main__":
    main()
