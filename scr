import imaplib
import email
import smtplib
import json
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
import time

class EmailMonitor:
    def __init__(self, email_address, email_password, webhook_url):
        self.email_address = email_address
        self.email_password = email_password
        self.webhook_url = webhook_url
        
        # Subjects to look for (both success and failure)
        self.success_subjects = [
            "SFTP Report Upload Success",
            "Report Generation Complete"
        ]
        
        self.failure_subjects = [
            "SFTP Report Upload Failed",
            "Report Generation Failed"
        ]
    
    def send_webhook(self, message, is_success=True):
        """Send notification to Google Chat via webhook"""
        try:
            # Create card message for Google Chat
            card_color = "#2ecc71" if is_success else "#e74c3c"  # Green for success, Red for failure
            
            payload = {
                "cards": [{
                    "header": {
                        "title": "Report Status Update",
                        "subtitle": "Automated Notification",
                        "imageUrl": "https://www.gstatic.com/images/icons/material/system/1x/report_gm_blue_24dp.png"
                    },
                    "sections": [{
                        "widgets": [{
                            "textParagraph": {
                                "text": message
                            }
                        }]
                    }],
                    "cardId": "reportStatus",
                    "backgroundColor": card_color
                }]
            }
            
            response = requests.post(
                self.webhook_url,
                json=payload
            )
            response.raise_for_status()
            print("Webhook notification sent successfully")
            return True
            
        except Exception as e:
            print(f"Error sending webhook: {str(e)}")
            return False
    
    def check_emails(self):
        """Check for success or failure emails within the last 20 minutes"""
        try:
            mail = imaplib.IMAP4_SSL("imap.gmail.com")
            mail.login(self.email_address, self.email_password)
            mail.select("inbox")
            
            # Get current time and calculate the 20-minute window
            now = datetime.now()
            twenty_minutes_ago = now - timedelta(minutes=20)
            
            # Format both current time and 20 minutes ago for IMAP search
            now_str = now.strftime("%d-%b-%Y %H:%M:%S")
            twenty_minutes_ago_str = twenty_minutes_ago.strftime("%d-%b-%Y %H:%M:%S")
            
            # Search criteria to find emails between the last 20 minutes
            search_criteria = f'(SINCE "{twenty_minutes_ago_str}" BEFORE "{now_str}")'
            _, message_numbers = mail.search(None, search_criteria)
            
            found_success = set()
            found_failure = set()
            
            for num in message_numbers[0].split():
                _, msg_data = mail.fetch(num, "(RFC822)")
                email_body = msg_data[0][1]
                message = email.message_from_bytes(email_body)
                subject = message["subject"]
                
                if subject in self.success_subjects:
                    found_success.add(subject)
                elif subject in self.failure_subjects:
                    found_failure.add(subject)
                    # Get email body for error details
                    error_message = self.get_email_body(message)
                    return "failure", error_message
            
            mail.logout()
            
            if found_failure:
                return "failure", None
            elif found_success == set(self.success_subjects):
                return "success", None
            else:
                return "waiting", None
            
        except Exception as e:
            print(f"Error checking emails: {str(e)}")
            return "error", str(e)
    
    def get_email_body(self, message):
        """Extract the email body text"""
        if message.is_multipart():
            for part in message.walk():
                if part.get_content_type() == "text/plain":
                    return part.get_payload(decode=True).decode()
        else:
            return message.get_payload(decode=True).decode()
        return "No error details available"
    
    def send_notification(self, client_email, status, error_details=None):
        """Send notification email to client"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email_address
            msg['To'] = client_email
            
            if status == "success":
                msg['Subject'] = "Daily Report Status: Success"
                body = "The daily report has been successfully generated and uploaded to the SFTP server."
            else:
                msg['Subject'] = "Daily Report Status: Failed"
                body = f"An issue was encountered during report processing.\n\nError Details:\n{error_details}"
            
            msg.attach(MIMEText(body, 'plain'))
            
            with smtplib.SMTP("smtp.gmail.com", 587) as server:
                server.starttls()
                server.login(self.email_address, self.email_password)
                server.send_message(msg)
            
            print("Email notification sent successfully")
            return True
            
        except Exception as e:
            print(f"Error sending email: {str(e)}")
            return False

def main():
    # Your credentials
    EMAIL_ADDRESS = "your_email@gmail.com"
    EMAIL_PASSWORD = "your_app_password"
    CLIENT_EMAIL = "client@example.com"
    WEBHOOK_URL = "your_google_chat_webhook_url"
    
    monitor = EmailMonitor(EMAIL_ADDRESS, EMAIL_PASSWORD, WEBHOOK_URL)
    
    while True:
        print("Checking for emails in the last 20 minutes...")
        status, error_details = monitor.check_emails()
        
        if status == "success":
            print("Success! All required emails found.")
            # Send success notifications
            monitor.send_notification(CLIENT_EMAIL, "success")
            monitor.send_webhook(
                "✅ Daily Report: Successfully generated and uploaded to SFTP server.",
                is_success=True
            )
            break
            
        elif status == "failure":
            print("Failure detected in report processing.")
            # Send failure notifications
            monitor.send_notification(CLIENT_EMAIL, "failure", error_details)
            monitor.send_webhook(
                f"❌ Daily Report: Failed\n{error_details if error_details else 'Check email for details.'}",
                is_success=False
            )
            break
            
        elif status == "waiting":
            print("Still waiting for all required emails...")
            time.sleep(300)  # Wait 5 minutes before next check
            
        else:  # error
            print(f"Error checking emails: {error_details}")
            monitor.send_webhook(
                f"⚠️ Error monitoring emails: {error_details}",
                is_success=False
            )
            break

if __name__ == "__main__":
    main()
